Geometry tree
IfcOpenShell includes a utility to build trees of geometry and their bounding boxes. Geometry trees can be used to efficiently select geometry or collide geometry with one another.

import multiprocessing
import ifcopenshell
import ifcopenshell.geom

tree = ifcopenshell.geom.tree()
settings = ifcopenshell.geom.settings()
iterator = ifcopenshell.geom.iterator(settings, ifc_file, multiprocessing.cpu_count())
if iterator.initialize():
    while True:
        # Use triangulation to build a BVH tree
        tree.add_element(iterator.get())

        # Alternatively, use this code to build an unbalanced binary tree
        # tree.add_element(iterator.get_native())

        if not iterator.next():
            break

clashes = tree.clash_intersection_many(
    group_a_elements, # e.g. from model.by_type("IfcWall")
    group_b_elements, # Group b can be the same as group a if you want to clash within a single set
    tolerance=0.002, # Any protrusions less than 2mm are ignored
    check_all=True, # Keep on checking all potential intersections to find a worst case protrusion distance
)

for clash in clashes:
    # Get the two elements that clash and their metadata
    element1 = clash.a
    element2 = clash.b
    a_global_id = element1.get_argument(0)
    b_global_id = element2.get_argument(0)
    a_ifc_class = element1.is_a()
    b_ifc_class = element2.is_a()
    a_name = element1.get_argument(2)
    b_name = element2.get_argument(2)

    # Potential clash types that can be detected are protrusions, pierces, and collisions
    clash_type = ["protrusion", "pierce", "collision", "clearance"][clash.clash_type],

    # P1 and P2 represents two XYZ coordinates. The meaning of the coordinate depends on the clash type.
    p1 = list(clash.p1)
    p2 = list(clash.p2)

    # This represents the protrusion or piercing distance in meters.
    # It is also the distance between P1 and P2.
    distance = clash.distance

clashes = tree.clash_collision_many(
    group_a_elements, # e.g. from model.by_type("IfcWall")
    group_b_elements, # Group b can be the same as group a if you want to clash within a single set
    allow_touching=True, # Include results where faces merely touch but do not intersect
)

for clash in clashes:
    # Get the two elements that clash and their metadata
    element1 = clash.a
    element2 = clash.b
    a_global_id = element1.get_argument(0)
    b_global_id = element2.get_argument(0)
    a_ifc_class = element1.is_a()
    b_ifc_class = element2.is_a()
    a_name = element1.get_argument(2)
    b_name = element2.get_argument(2)

    # P1 and P2 represents two possible arbitrary points where a collision is found.
    # P1 may or may not be equal to P2.
    p1 = list(clash.p1)
    p2 = list(clash.p2)\

clashes = tree.clash_clearance_many(
    group_a_elements, # e.g. from model.by_type("IfcWall")
    group_b_elements, # Group b can be the same as group a if you want to clash within a single set
    clearance=0.1, # Any surface closer than than 100mm is a clash
    check_all=False, # Stop measuring distances once the first clearance violation is found per element.
)

for clash in clashes:
    # Get the two elements that clash and their metadata
    element1 = clash.a
    element2 = clash.b
    a_global_id = element1.get_argument(0)
    b_global_id = element2.get_argument(0)
    a_ifc_class = element1.is_a()
    b_ifc_class = element2.is_a()
    a_name = element1.get_argument(2)
    b_name = element2.get_argument(2)

    # P1 and P2 represents the two XYZ coordinates between element1 and element2.
    p1 = list(clash.p1)
    p2 = list(clash.p2)

    # This represents the distance between element1 and element2 that is less than the clearance.
    # It is the distance between P1 and P2. It cannot be less than 0.
    distance = clash.distance

origin = (0., 0., 0.)
direction = (1., 0., 0.)
results = tree.select_ray(origin, direction, length=5.)

for result in results:
    print(ifc_file.by_id(result.instance.id())) # The element the ray intersects with
    print(list(result.position)) # The XYZ intersection point
    print(result.distance) # The distance between the ray origin and the intersection
    print(list(result.normal)) # The normal of the face being intersected
    print(result.dot_product) # The dot product of the face being intersected with the ray