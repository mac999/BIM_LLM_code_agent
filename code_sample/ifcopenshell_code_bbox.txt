import ifcopenshell
from ifcopenshell import geom
import numpy as np
import os, sys
from OCC.Core.gp import gp_Vec  # import OpenCASCADE
from OCC.Core.Quantity import Quantity_Color, Quantity_TOC_RGB
from OCC.Core.Graphic3d import Graphic3d_ClipPlane
from OCC.Display.SimpleGui import init_display
from OCC.Display.OCCViewer import Viewer3d
from OCC.Core.BRepBndLib import brepbndlib_Add, brepbndlib
from OCC.Core.Bnd import Bnd_Box

# IFC 파일 로드
ifc_fname = './expert_kb_files/duplex_a_20110907.ifc'
ifc_database = ifcopenshell.open(ifc_fname)

# 특정 방을 이름으로 검색하는 함수
def get_object_as_name(ifc_database, name):
    element_types = ['IfcSpace']  # 공간 객체 유형
    products = []
    objects_pset = []

    for product in ifc_database:
        obj_type = product.is_a()

        if obj_type not in element_types:
            continue

        obj = {'name': product.Name, 'type': obj_type}
        try:
            if product.IsDefinedBy is None:
                continue
            for relationship in product.IsDefinedBy:
                if not relationship.is_a('IfcRelDefinesByProperties'):
                    continue
                if not relationship.RelatingPropertyDefinition.is_a('IfcPropertySet'):
                    continue
                pset = relationship.RelatingPropertyDefinition
                for property in pset.HasProperties:
                    if not property.is_a('IfcPropertySingleValue'):
                        continue
                    obj[property.Name] = property.NominalValue.wrappedValue
            if obj['name'] == name:
                products.append(product)
                objects_pset.append(obj)
        except Exception as e:
            pass
    return products, objects_pset

# Bounding Box를 계산하는 함수
def get_ifc_bbox(product):
    if product.Representation is None:  # 3D 표현이 없는 경우
        return None

    try:
        display.EraseAll()
        display.Context.RemoveAll(True)

        settings = geom.settings() # https://docs.ifcopenshell.org/ifcopenshell/geometry_settings.html
        settings.set(settings.USE_PYTHON_OPENCASCADE, True) # https://github.com/IfcOpenShell/IfcOpenShell/issues/689

        pdct_shape = ifcopenshell.geom.create_shape(settings, inst=product)
        r, g, b, a = pdct_shape.styles[0]  # the shape color
        color = Quantity_Color(abs(r), abs(g), abs(b), Quantity_TOC_RGB)
        new_ais_shp = display.DisplayShape(
            pdct_shape.geometry,
            color=color,
            transparency=abs(1 - a),
            update=True
        )[0]
        bbox = Bnd_Box()
        # brepbndlib_Add(new_ais_shp.Shape(), bbox)
        brepbndlib.Add(new_ais_shp.Shape(), bbox)
        xmin, ymin, zmin, xmax, ymax, zmax = bbox.Get()

        return [[xmin, ymin, zmin], [xmax, ymax, zmax]]
    except Exception as e:
        return None

# 중심 좌표 계산 함수
def calculate_bbox_center(bbox):
    xmin, ymin, zmin = bbox[0]
    xmax, ymax, zmax = bbox[1]
    return np.array([(xmin + xmax) / 2, (ymin + ymax) / 2, (zmin + zmax) / 2])

display = None
def init_ifc_display():
    global display
    # display, start_display, add_menu, add_function_to_menu = init_display()
    display = Viewer3d()
    # by default, the offscreenrenderer size is 640*480
    display.Create()
    display.SetModeShaded()

def destroy_ifc_display():
    global display
    if display == None:
        return
    display.EraseAll()
    display.Context.RemoveAll(True)    
    display = None

init_ifc_display()

# 방 'A101'과 'B101'의 Bounding Box 계산
room_names = ['A101', 'A102']
room_centers = {}

for room_name in room_names:
    products, _ = get_object_as_name(ifc_database, room_name)
    if not products:
        print(f"Room {room_name} not found in the IFC file.")
        continue

    # Bounding Box 계산
    bbox = get_ifc_bbox(products[0])
    if not bbox:
        print(f"Bounding box for room {room_name} could not be calculated.")
        continue

    # 중심 좌표 계산
    center = calculate_bbox_center(bbox)
    room_centers[room_name] = center
    print(f"Room {room_name} center: {center}")

# 두 방 사이의 거리 계산
if len(room_centers) == 2:
    distance = np.linalg.norm(room_centers['A101'] - room_centers['A102'])
    print(f"Distance between A101 and B101: {distance} meters")
else:
    print("One or both rooms are missing or could not be processed.")

destroy_ifc_display()